name: Integration test

on:
  schedule:
    - cron: "0 0 * * *"  # Run daily at midnight UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        python: ["3.10", "3.12"]
        package: ["integration-testing"] # "mudata", "spatialdata", "scirpy", "muon", "scanpy", "squidpy", "scvi-tools", 

    defaults:
      run:
        shell: bash -el {0}

    runs-on: ubuntu-latest
  
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      - uses: actions/checkout@v3
        with:
          repository: scverse/${{ matrix.package }}
  
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install UV
        uses: hynek/setup-cached-uv@v2

      - name: Install AnnData + test dep
        run: |
          printf "numba>=0.60.0\nnumpy<2.0" | tee /tmp/constraints.txt
          uv pip install --compile --system ".[test]" -c /tmp/constraints.txt -v 
          uv pip install --compile --system git+https://github.com/scverse/anndata

      - name: Set failure type for install
        if: failure()
        run: |
          echo "Installation failed for ${{ matrix.package }}"
          echo "failure_type=install" >> $GITHUB_ENV

      - name: Env list
        run: uv pip freeze

      - name: Run test
        run: pytest

      - name: Set failure type for test
        if: failure() && env.failure_type != 'install'
        run: |
          echo "Test failed for ${{ matrix.package }}"
          echo "failure_type=test" >> $GITHUB_ENV
    
      - name: Check if failure issue already exists
        if: failure() # && github.event_name == 'schedule'
        id: find_issue
        run: |
          ISSUE_TITLE="Daily CI ${failure_type^} Failure - ${{ matrix.package }}"
          echo "Checking for existing issue: $ISSUE_TITLE"
          ISSUE_COUNT=$(gh issue list --repo scverse/${{ matrix.package }} --state open --search "${ISSUE_TITLE}" --json number --jq 'length')
          if [[ "$ISSUE_COUNT" -gt 0 ]]; then
            echo "${failure_type^} failure issue already exists for today."
            echo "issue_exists=true" >> $GITHUB_ENV
          else
            echo "issue_exists=false" >> $GITHUB_ENV
            echo "issue_title=$ISSUE_TITLE" >> $GITHUB_ENV
          fi

      - name: Report failure issue
        if: failure() && env.issue_exists == 'false' # && github.event_name == 'schedule'
        run: |
          ISSUE_BODY="The daily CI ${failure_type} for ${{ matrix.package }} failed."
          gh issue create --repo scverse/${{ matrix.package }} --title "${{ env.issue_title }}" --body "${ISSUE_BODY}"